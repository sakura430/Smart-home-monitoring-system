#include "esp01s_switch.h"



int esp01s_open(void){
	PrintToEsp01s("AT\r\n");
    while (1) {
        QueueSetMemberHandle_t set = xQueueSelectFromSet(QueueSet, portMAX_DELAY);
            if (set == queueESP01s) {
                static char str[MAX_SIZE] = {0};
                char Data;
                vTaskDelay(100);//等待中断发送完所有数据
                UBaseType_t que_msg_num = uxQueueMessagesWaiting(queueESP01s);

                while (que_msg_num > 0) {
                    xQueueReceive(queueESP01s, &Data, 0);
                    str[strlen(str)] = Data;
                    que_msg_num--;
                }

                if (strlen(str) != 0) {
                    PrintToUTools("Esp01s :%s", str);
                    char *temp[5] = {"AT\r\n\r\nOK",
                                     "AT+CIPMODE=1\r\n\r\nOK",
                                     "AT+CIPSEND\r\n\r\nOK",
                                     "AT+CIPMODE=1\r\n",
                                     "AT+CIPSEND\r\n"
                                    };
                    static int i = 0;

                    for (; i < 3; i++) {
                        int ret = matchString(str, temp[i], strlen(str), strlen(temp[i]));

                        if (ret == 1) {
                            if (i == 2) {
                                PrintToUTools("switch -> ON\r\n");
                                return 1;
                            }

                            PrintToEsp01s("%s", temp[i + 3]);
                            break;
                        }
                    }

                    memset(str, 0, sizeof(str));
                }
            }
        } 
}
int esp01s_close(void){
	
	    while (1) {
        QueueSetMemberHandle_t set = xQueueSelectFromSet(QueueSet, portMAX_DELAY);
            if (set == queueESP01s) {
                static char str[MAX_SIZE] = {0};
                char Data;
                vTaskDelay(100);//等待中断发送完所有数据
                UBaseType_t que_msg_num = uxQueueMessagesWaiting(queueESP01s);

                while (que_msg_num > 0) {
                    xQueueReceive(queueESP01s, &Data, 0);
                    str[strlen(str)] = Data;
                    que_msg_num--;
                }
				PrintToUTools("---------4------\r\n");
                if (strlen(str) != 0) {
                    PrintToUTools("Esp01s :%s", str);
                    char *temp[6] = {"AT\r\n\r\nOK",
                                     "AT+CIPMODE=0\r\n\r\nOK",
                                     "AT+CIPCLOSE\r\n\r\nOK",
                                     "+++",
                                     "AT+CIPMODE=0\r\n",
                                     "AT+CIPCLOSE\r\n"
                                    };
                    static int i = 0;
					PrintToUTools("---------5------\r\n");
                    for (; i < 3; i++) {
                        int ret = matchString(str, temp[i], strlen(str), strlen(temp[i]));

                        if (ret == 1) {
                            if (i == 0) {
                                PrintToEsp01s("%s", temp[i + 3]);
                                vTaskDelay(2000);
								PrintToUTools("send +++ \r\n");
                                PrintToEsp01s("%s", temp[i + 4]);
                                break;
                            }

                            if (i == 2) {
                                PrintToUTools("switch -> OFF\r\n");
                                memset(str, 0, sizeof(str));
								return 1;
                            }

                            PrintToEsp01s("%s", temp[i + 4]);
                            break;
                        }
                    }
                    memset(str, 0, sizeof(str));
                }
            }
}		
  }          
